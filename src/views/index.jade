extends layout

mixin whatItIs()
  div.what-it-is.offset2.span4.small.doc-block
    h5 What it is:
    ul
      li 2D/3D geometry
      li Mesh generation
      li Interpolation / Mapping
      li Wave Generators
      li 2D physics simulation
      li Color theory sorting and conversion

mixin asSeenIn()
  .as-seen-in.doc-block
    h3 As seen in:
    ul
      //li
        a(href="http://www.chromeweblab.com/") Chrome Web Lab - Google
      li
        a(href="http://justafriend.ie") Just A Friend - Microsoft
      li
        a(href="http://www.nand.io/visualisation/tyne") Tyne - Studio Nand and Moritz Stefaner
      li
        a(href="http://madeinhaus.com/work/white-house") The Voice Of __ - Commission for Presidential Debates
      li
        a(href="http://www.shapeways.com/creator/sake-set/") Sake Set Creator - Shapeways
      li
        a(href="http://aaron-sherwood.com/works/flow/index.html") Flow Micro - Aaron Sherwood
      li
        a(href="https://vimeo.com/27951113") Adobe Illustrator + Physics - Ken Frederick
      li
        a(href="http://my.safaribooksonline.com/book/-/9781849517942/9dot-exploring-javascript-mode/id286781626") Processing 2: Creative Programming Cookbook - Jan Vantomme
      li
        a(href="https://vimeo.com/41631496") Constellation - Joshua Albers 

block content 
  a(href="https://github.com/hapticdata/toxiclibsjs")
    img(style="position: absolute; top: 0; right: 0; border: 0;", src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png", alt="Fork me on GitHub")
  section.header.above.container-fluid
    div.row-fluid
      div.span6
        div
          h1 Toxiclibs.js
          h2 an open-source library for computational design.
          :markdown
            
            [Toxiclibs](http://toxiclibs.org) was originally written by 
            [Karsten Schmidt](http://postspectacular.com) for Java and
            [Processing](http://processing.org) and is being ported to 
            javascript by [Kyle Phillips](http://hapticdata.com).

            Toxiclibs.js works great with Canvas, SVG or any DOM element.
            Examples below pair with such fine libraries as: 
            [Processing.js](http://processingjs.org), [Three.js](http://threejs.org),
            or [Raphael.js](http://raphaeljs.com) for SVG.

          ul.pill-list.twitter
            li.button
              a.twitter-share-button(data-url="http://haptic-data.com/toxiclibsjs",href="https://twitter.com/share", data-via="hapticdata") Tweet
              script
                !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");
            li.button
              a(href="http://twitter.com/hapticdata") @hapticdata
      mixin whatItIs()

block below
  section.below.container-fluid
    div.row-fluid
      div.span6.doc-block
        h2 Getting Started with Toxiclibs.js
        :markdown
          Toxiclibs.js can be used in the following ways:

          * a standard javascript include within a global `toxi` object.
          * [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) modules for loaders such as [RequireJS](http://requirejs.org)
          * [Node.js](http://nodejs.org) package, available through [NPM](http://npmjs.org)

        
          ####Using the concatenated / minified files from `build/` :
            
        pre.prettyprint.language-html
          - var scriptTag = ['<script type="text/javascript" src="js/toxiclibs.min.js"></script>','<script type="text/javascript">','  var myVector = new toxi.geom.Vec2D( 2, 3 ).scaleSelf(0.5);','  var myColor = toxi.color.TColor.newRGB(128/255,64/255,32/255);','</script>'].join('\n');
          code= scriptTag
        
        a(name="use-with-requirejs-or-other-amd-loader")
        :markdown
          ####To use with [RequireJS](http://requirejs.org), use the contents of `lib/`:

        pre.prettyprint.language-js
          | require([
          |   'toxi/geom/Vec2D',
          |   'toxi/color/TColor'
          | ],function( Vec2D, TColor ){
          |   var myVector = new Vec2D( 2, 3 ).scaleSelf(0.5);
          |   var myColor = TColor.newRGB(128/255,64/255,32/255);
          | });

        :markdown
          ####To use with [Node.js](http://nodejs.org):
              
              npm install toxiclibsjs

        pre.prettyprint.language-js
          | var toxi = require('toxiclibsjs'),
          | myVector = new toxi.geom.Vec2D(0.5,0.5),
          | myColor = toxi.color.TColor.newRGB(128/255,64/255,32/255);

      div.span6
        mixin asSeenIn()

        :markdown
          ####Toxiclibs.js follows the original package structure
          The top-level of `toxi` contains the following objects:

          * **`color`** - the color utils package
          * **`geom`** - the geometry package
          * *`internals`* - functionality used within the library
          * **`math`** - the math utils package
          * **`physics2d`** - the Verlet Physics 2D package
          * **`processing`** - the processing package, eases use with [Processing.js](http://processingjs.org)
          * **`THREE`** - features to ease use with [Three.js](http://github.com/mrdoob/three.js)
          * **`utils`** - the utils package

          For comprehensive documentation, read the original [javadocs](http://toxiclibs.org/javadocs/).

      div.span6.doc-block
        :markdown
          ####Create custom builds easily
          If you are working with the `build/` files you may wish to [create a custom build](https://github.com/hapticdata/toxiclibsjs/blob/master/README.md#creating-builds)
          that only includes the modules you are using in order to save file size. 
          _If you are [using the files as AMD modules](#use-with-requirejs-or-other-amd-loader) there is no need for this._
          
          To generate a custom build, space-delimit the modules you want:

              ./bin/toxiclibsjs --include "toxi/geom/Vec2D toxi/physics2d" --minify --out "./build/toxiclibsjs-custom.min.js"

    div.page-header
      :markdown
        ##Differences from the original [Toxiclibs](http://toxiclibs.org)
  
    div.row-fluid
      div.span6
        :markdown
          There are several areas where _toxiclibs.js_ stands apart to remain more
          idiomatic and helpful in the javascript environment.
          For a complete description of the conveniences added to toxiclibs.js, 
          read the [sugar](https://github.com/hapticdata/toxiclibsjs/blob/develop/docs/sugar.md) 
          file in the repository. Some examples of these differences are:
          
          - _loose-typed_ for working more naturally with javascript objects, no `instanceof` tests are ever used
          - `toxi.THREE.ToxiclibsSupport` for easing work with [Three.js](http://threejs.org)
          - `toxi.color.TColor` additions for [complete interoperability with CSS and X11 color names](https://github.com/hapticdata/toxiclibsjs/blob/develop/docs/sugar.md#toxicolortcolor).
          - `toxi.geom.mesh.OBJWriter`'s `getOutput()` for getting OBJ contents back as a string (helpful in js environments that don't have file system access).

        :markdown
          ###Arrays / Collections
          The Java version frequently uses [Collections](http://docs.oracle.com/javase/tutorial/collections/), [Iterators](http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Iterator.html), and [java-specific for-loops](http://stackoverflow.com/questions/8681593/does-javascript-have-an-enhanced-for-loop-syntax-similar-to-javas)[[2]](http://blogs.oracle.com/sundararajan/entry/java_javascript_and_jython). In toxiclibs.js you will see a standard JavaScript usage of arrays. Below is an example of accessing the faces from a TriangleMesh:

        pre.prettyprint.language-js
          | var len = mesh.faces.length, i = 0;
          | for(i = 0; i < len; i++){
          |   doSomething( mesh.faces[i] );
          | }

        :markdown
          This section will occassionally be expanded on. If you have a suggestion, or have a question on how something works, feel free to [leave an issue](https://github.com/hapticdata/toxiclibsjs/issues) and I am quick to respond. 

      div.span6
        :markdown
          Many of the constructors and other functions have additional support 
          for option objects. For example:

        pre.prettyprint.language-js
          | //any object with an `x` and `y` will work
          | var vec = new toxi.geom.Vec2D({ x: 0.5, y: 0.25 });
          | var map = new toxi.math.ScaleMap({
          |   input: { min: 0, max: 100 },
          |   output: { min: -1, max: 1}
          | });
          | var mesh = sphere.toMesh({
          |   mesh: new toxi.geom.mesh.TriangleMesh('sphere'),
          |   resolution: 20
          | });
